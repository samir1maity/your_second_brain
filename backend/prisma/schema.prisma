// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector(schema: "extensions")]
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique @db.VarChar(255)
  passwordHash  String
  preferences   Json?           @default("{}")
  createdAt     DateTime        @default(now()) @db.Timestamptz
  updatedAt     DateTime        @updatedAt @db.Timestamptz
  isActive      Boolean         @default(true)
  contents      Content[]
  tags          Tag[]
  collections   Collection[]
  searchHistory SearchHistory[]

  @@index([email])
}

model Content {
  id              String                      @id @default(uuid())
  user            User                        @relation(fields: [userId], references: [id])
  userId          String
  url             String?                     @db.Text
  title           String?                     @db.VarChar(512)
  contentText     String?                     @db.Text
  embedding       Unsupported("extensions.vector(384)")?
  metadata        Json                        @default("{}")
  summary         String?                     @db.Text
  lastAccessed    DateTime?                   @db.Timestamptz
  createdAt       DateTime                    @default(now()) @db.Timestamptz
  updatedAt       DateTime                    @updatedAt @db.Timestamptz
  isArchived      Boolean                     @default(false)
  tags            ContentTag[]
  collections     CollectionItem[]

  @@index([url])
  @@index([userId])
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(64)
  description String?      @db.Text
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  isSystem    Boolean      @default(false)
  createdAt   DateTime     @default(now()) @db.Timestamptz
  contents    ContentTag[] 

  @@unique([name, userId]) 
}

model ContentTag {
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId  String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  confidence Float? // AI confidence score in tag assignment (0-1)
  isAuto     Boolean  @default(false) // Whether tag was AI-generated
  createdAt  DateTime @default(now()) @db.Timestamptz

  @@id([contentId, tagId]) // Composite primary key
}

model Collection {
  id          String           @id @default(uuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  name        String           @db.VarChar(255)
  description String?          @db.Text
  settings    Json             @default("{}")
  createdAt   DateTime         @default(now()) @db.Timestamptz
  updatedAt   DateTime         @updatedAt @db.Timestamptz
  items       CollectionItem[] 

  @@unique([name, userId]) 
}

model CollectionItem {
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  content      Content    @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId    String
  position     Int 
  addedAt      DateTime   @default(now()) @db.Timestamptz

  @@id([collectionId, contentId])
}

model SearchHistory {
  id             String                      @id @default(uuid())
  user           User                        @relation(fields: [userId], references: [id])
  userId         String
  queryText      String                      @db.Text
  queryEmbedding Unsupported("extensions.vector(384)")? 
  createdAt      DateTime                    @default(now()) @db.Timestamptz
}
